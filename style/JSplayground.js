// Ask the server to send the client a notification (for testing purposes, in real
// applications the notification will be generated by some event on the server).
document.getElementById('webPushBtn').addEventListener('click', function() {
  fetch('/sendNotification', {
    method: 'post',
    headers: {
      'Content-type': 'application/json'
    },
    body: JSON.stringify({
      endpoint: endpoint,
      key: key,
      authSecret: authSecret,
      title: document.getElementById("caseNum").value,
      body: document.getElementById("Name").value,
      icon: document.getElementById("Qid").value,
      link: document.getElementById("notificationLink").value
    }),
  });
});

//FIREBASE Admin SDK configuration snippet
var admin = require("firebase-admin");

var serviceAccount = require("path/to/serviceAccountKey.json");

admin.initializeApp({
  credential: admin.credential.cert(serviceAccount),
  databaseURL: "https://ayub-app.firebaseio.com"
});

var redirectUrl = document.location.href="../index.html";


var beepThree = $("#play-fx-sound a")[0];
$("#fx-sound a").mouseenter(function() {
		beepThree.pause();
		beepThree.play();
	});



var audio = document.getElementsByTagName("input")[0];
audio.play();

var audio = document.getElementById("twitter-api");
audio.play();

// using jQuery
var audio = $("#twitter-api")[0];
audio.play();

//my working code for show/hide button toggle --- working without authenticatication

//version-01

$(document).ready(function(){
document.getElementById("twitter-api-btn").innerHTML = "Show";
$('.authVerify').hide();
$('#private').hide();
 $('#twitter-api-btn').click(function() {
	   $(this).text(function(i,v){
		   $('#private').toggle();
		   return v === 'HIDE' ? 'SHOW' : 'HIDE'
	   })	 
   });	   	   	   
});	

//version-02
$(document).ready(function(){
	document.getElementById("twitter-api-btn").innerHTML = "Show";
	$('.authVerify').hide();
	$('#private').hide();
	
	setTimeout(function(){
		$('.authVerify').toggle();
	},2000);
	$('#twitter-api-btn').click(function() {
		$('.authVerify').toggle();
	}	
	$('#twitter-api-btn').click(function() {
		 var apiPasswd = "secretKey"
		 $('.authVerify').toggle();
		if (document.getElementById("token").value == apiPasswd){	   
			   $(this).text(function(i,v){
				   $('#private').toggle();
				   $('.authVerify').hide();
				   return v === 'HIDE' ? 'SHOW' : 'HIDE'
				 })		   
			setTimeout(function(){			 
				document.getElementById("token").value = "";
				$('#private').hide();
				document.getElementById("twitter-api-btn").innerHTML = "Show";						
			},10000);		 
		}else{
			var snd = new Audio('audio/xp-alert.mp3');		 
			snd.play();		 	 
			window.alert("You need a valid password to access this resorce.");
			document.getElementById("token").value = "";
			document.getElementById("imgElement").src = "images/caution-red.jpg";
			$('.authVerify').show();	
			// document.getElementById("authReply").innerHTML="Sorry! You are NOT allowed to access this resource without a valid password.";
			setTimeout(function(){				
				$('#private').hide();								
				document.getElementById("imgElement").src = "images/twitter-dark.png";
				document.getElementById("token").value = "";
				// var snd = new Audio('audio/Security-level-3.m4a');
				// snd.play();
				},5000);		 
		}
	});	   	   	   
});	

//Sending push notifications in Node.js on the open web using the Voluntary Application server Identification (VAPID) protocol
//Because comments are not enebaled in JSON file, I will keep this Json data here below
{
  "name": "AYUB DEVELOPMENT",
  "short_name": "Ayub-Tech",
  "icons": [
	{
        "src": "images/twitter-dark.png",
        "sizes": "192x192"
    }
	],
  "start_url": "./index.html",
  "display": "standalone",
  "gcm_sender_id": "205906258105"
}

// application.js
// Register the serviceWorker script at /serviceworker.js from our server if supported
if (navigator.serviceWorker) {
  navigator.serviceWorker.register('/serviceworker.js')
  .then(function(reg) {
    console.log('Service worker change, registered the service worker');
  });
}
// Otherwise, no push notifications :(
else {
  console.error('Service worker is not supported in this browser');
}



//Code below attempts to decode VAPID key
<!-- html template -->
<script>
window.vapidPublicKey = new Uint8Array(<%= @decodedVapidPublicKey %>);
</script>

// server
const urlsafeBase64 = require('urlsafe-base64');
const decodedVapidPublicKey = urlsafeBase64.decode(process.env.VAPID_PUBLIC_KEY);


// application.js
// When serviceWorker is supported, installed, and activated,
// subscribe the pushManager property with the vapidPublicKey
navigator.serviceWorker.ready.then((serviceWorkerRegistration) => {
  serviceWorkerRegistration.pushManager.subscribe({
    userVisibleOnly: true,
    applicationServerKey: window.vapidPublicKey
  });
});

//Triggering a web push notification
// application.js
$('.webpush-button').on('click', (e) => {
  navigator.serviceWorker.ready.then((serviceWorkerRegistration) => {
    serviceWorkerRegistration.pushManager.getSubscription().then((subscription) => {
      $.post('/push', {
        subscription: subscription.toJSON(),
        message: 'You clicked a button!'
      });
    });
  });
});

